TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_FromOrigin_StraightThenTurnLeft)
{
  pose initialPose = {.x = 3.000000, .y = 1.000000, .theta = 0.900000 };
  pose finalDestination = {.x = 0.000000, .y = 0.000000, .theta = 0.000000 };
  maneuver expected1 = {.radius = 2.642800, .xc = 0.929840, .yc = 2.642800, .distance = -2.378500};
  maneuver expected2 = {.radius = -1000.000000, .xc = 0.464920, .yc = -793.550000, .distance = -0.929840};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_FromOrigin_StraightThenTurnRight)
{
  pose initialPose = {.x = 3.000000, .y = -1.000000, .theta = -0.900000 };
  pose finalDestination = {.x = 0.000000, .y = 0.000000, .theta = 0.000000 };
  maneuver expected1 = {.radius = -2.642800, .xc = 0.929840, .yc = -2.642800, .distance = -2.378500};
  maneuver expected2 = {.radius = -1000.000000, .xc = 0.464920, .yc = 793.550000, .distance = -0.929840};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_FromOrigin_TurnLeftThenStraight)
{
  pose initialPose = {.x = 3.000000, .y = 1.000000, .theta = 0.500000 };
  pose finalDestination = {.x = 0.000000, .y = 0.000000, .theta = 0.000000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 482.020000, .yc = -876.800000, .distance = -0.916320};
  maneuver expected2 = {.radius = 4.580200, .xc = 0.000000, .yc = 4.580200, .distance = -2.290100};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_FromOrigin_TurnRightThenStraight)
{
  pose initialPose = {.x = 3.000000, .y = -1.000000, .theta = -0.500000 };
  pose finalDestination = {.x = 0.000000, .y = 0.000000, .theta = 0.000000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -476.830000, .yc = -878.360000, .distance = -0.916320};
  maneuver expected2 = {.radius = -4.580200, .xc = 0.000000, .yc = -4.580200, .distance = -2.290100};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosY_StraightThenTurnLeft)
{
  pose initialPose = {.x = 4.000000, .y = 1.000000, .theta = 0.700000 };
  pose finalDestination = {.x = 2.000000, .y = 0.500000, .theta = 0.000000 };
  maneuver expected1 = {.radius = 2.126200, .xc = 2.630200, .yc = 2.626200, .distance = -1.488400};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.315100, .yc = -1186.700000, .distance = -0.630240};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosY_StraightThenTurnRight)
{
  pose initialPose = {.x = 4.000000, .y = 0.000000, .theta = -0.700000 };
  pose finalDestination = {.x = 2.000000, .y = 0.500000, .theta = 0.000000 };
  maneuver expected1 = {.radius = -2.126200, .xc = 2.630200, .yc = -1.626200, .distance = -1.488400};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.315100, .yc = 1187.700000, .distance = -0.630240};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransNegY_StraightThenTurnLeft)
{
  pose initialPose = {.x = 4.000000, .y = 0.000000, .theta = 0.700000 };
  pose finalDestination = {.x = 2.000000, .y = -0.500000, .theta = 0.000000 };
  maneuver expected1 = {.radius = 2.126200, .xc = 2.630200, .yc = 1.626200, .distance = -1.488400};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.315100, .yc = -1187.700000, .distance = -0.630240};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransNegY_StraightThenTurnRight)
{
  pose initialPose = {.x = 4.000000, .y = -1.000000, .theta = -0.700000 };
  pose finalDestination = {.x = 2.000000, .y = -0.500000, .theta = 0.000000 };
  maneuver expected1 = {.radius = -2.126200, .xc = 2.630200, .yc = -2.626200, .distance = -1.488400};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.315100, .yc = 1186.700000, .distance = -0.630240};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot1stQuad_StraightThenTurnLeft)
{
  pose initialPose = {.x = 4.000000, .y = 1.000000, .theta = 0.700000 };
  pose finalDestination = {.x = 2.000000, .y = 0.500000, .theta = 0.200000 };
  maneuver expected1 = {.radius = 0.757200, .xc = 3.512200, .yc = 1.579100, .distance = -0.378600};
  maneuver expected2 = {.radius = -1000.000000, .xc = 366.490000, .yc = -1793.300000, .distance = -1.696400};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot1stQuad_StraightThenTurnRight)
{
  pose initialPose = {.x = 4.036800, .y = 0.818310, .theta = -0.300000 };
  pose finalDestination = {.x = 2.000000, .y = 0.500000, .theta = 0.200000 };
  maneuver expected1 = {.radius = -0.757120, .xc = 3.813100, .yc = 0.095006, .distance = -0.378560};
  maneuver expected2 = {.radius = -1000.000000, .xc = -360.830000, .yc = 1794.700000, .distance = -1.696500};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot1stQuad_TurnLeftThenStraight)
{
  pose initialPose = {.x = 2.500000, .y = 1.000000, .theta = 1.300000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 0.100000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 965.990000, .yc = -266.750000, .distance = -0.513180};
  maneuver expected2 = {.radius = 0.419950, .xc = 1.958100, .yc = 0.617860, .distance = -0.503940};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot1stQuad_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.629100, .y = -0.286710, .theta = -1.100000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 0.100000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -888.630000, .yc = -453.780000, .distance = -0.222300};
  maneuver expected2 = {.radius = -0.533040, .xc = 2.053200, .yc = -0.330380, .distance = -0.639650};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_2_StraightThenTurnLeft)
{
  pose initialPose = {.x = 1.500000, .y = 1.500000, .theta = 2.500000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.570800 };
  maneuver expected1 = {.radius = 1.245200, .xc = 0.754760, .yc = 0.502380, .distance = -1.157100};
  maneuver expected2 = {.radius = -1000.000000, .xc = 749.020000, .yc = 0.350950, .distance = -0.302380};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_2_StraightThenTurnRight)
{
  pose initialPose = {.x = 2.500000, .y = 1.500000, .theta = 0.641590 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.570800 };
  maneuver expected1 = {.radius = -1.245200, .xc = 3.245200, .yc = 0.502380, .distance = -1.157100};
  maneuver expected2 = {.radius = -1000.000000, .xc = -745.020000, .yc = 0.351440, .distance = -0.302380};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_2_TurnLeftThenStraight)
{
  pose initialPose = {.x = 1.500000, .y = 1.000000, .theta = 2.500000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.570800 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 600.050000, .yc = 802.080000, .distance = -0.197620};
  maneuver expected2 = {.radius = 0.850950, .xc = 1.149100, .yc = 0.200000, .distance = -0.790700};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_2_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.500000, .y = 1.000000, .theta = 0.641590 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.570800 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 600.890000, .yc = -800.200000, .distance = -0.197620};
  maneuver expected2 = {.radius = -0.850950, .xc = 2.850900, .yc = 0.200000, .distance = -0.790710};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot2ndQuad_StraightThenTurnLeft)
{
  pose initialPose = {.x = 1.500000, .y = 1.400000, .theta = 2.500000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.700000 };
  maneuver expected1 = {.radius = 1.125000, .xc = 0.826690, .yc = 0.498680, .distance = -0.900040};
  maneuver expected2 = {.radius = -1000.000000, .xc = 965.090000, .yc = 125.560000, .distance = -0.447360};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot2ndQuad_StraightThenTurnRight)
{
  pose initialPose = {.x = 2.176700, .y = 1.487900, .theta = 0.900000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.700000 };
  maneuver expected1 = {.radius = -1.124900, .xc = 3.057800, .yc = 0.788670, .distance = -0.899900};
  maneuver expected2 = {.radius = -1000.000000, .xc = -961.150000, .yc = -124.710000, .distance = -0.447460};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot2ndQuad_TurnLeftThenStraight)
{
  pose initialPose = {.x = 1.500000, .y = 0.800000, .theta = 2.500000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.700000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 600.100000, .yc = 801.840000, .distance = -0.330490};
  maneuver expected2 = {.radius = 0.598270, .xc = 1.406700, .yc = 0.122920, .distance = -0.478610};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot2ndQuad_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.330100, .y = 0.907850, .theta = 0.900000 };
  pose finalDestination = {.x = 2.000000, .y = 0.200000, .theta = 1.700000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 785.550000, .yc = -620.830000, .distance = -0.330550};
  maneuver expected2 = {.radius = -0.598200, .xc = 2.593200, .yc = 0.277070, .distance = -0.478560};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_StraightThenTurnLeft)
{
  pose initialPose = {.x = 1.000000, .y = 0.200000, .theta = -2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = 3.141600 };
  maneuver expected1 = {.radius = 1.615700, .xc = 2.394700, .yc = -0.615660, .distance = -1.682900};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.697100, .yc = 585.850000, .distance = -0.605350};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_StraightThenTurnRight)
{
  pose initialPose = {.x = 1.000000, .y = 1.800000, .theta = 2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = 3.141600 };
  maneuver expected1 = {.radius = -1.615700, .xc = 2.394700, .yc = 2.615700, .distance = -1.682900};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.697500, .yc = -583.850000, .distance = -0.605350};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_TurnLeftThenStraight)
{
  pose initialPose = {.x = 2.000000, .y = 0.200000, .theta = -2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = 3.141600 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -861.110000, .yc = 505.220000, .distance = -0.394650};
  maneuver expected2 = {.radius = 0.927670, .xc = 3.000000, .yc = 0.072332, .distance = -0.966250};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotPI_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.000000, .y = 1.800000, .theta = 2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = 3.141600 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 865.310000, .yc = 506.480000, .distance = -0.394650};
  maneuver expected2 = {.radius = -0.927660, .xc = 3.000000, .yc = 1.927700, .distance = -0.966240};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPI_StraightThenTurnLeft)
{
  pose initialPose = {.x = 1.000000, .y = 0.200000, .theta = -2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -3.141600 };
  maneuver expected1 = {.radius = 1.615700, .xc = 2.394700, .yc = -0.615660, .distance = -1.682900};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.697500, .yc = 585.850000, .distance = -0.605350};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPI_StraightThenTurnRight)
{
  pose initialPose = {.x = 1.000000, .y = 1.800000, .theta = -4.183200 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -3.141600 };
  maneuver expected1 = {.radius = -1.615600, .xc = 2.394600, .yc = 2.615600, .distance = -1.682800};
  maneuver expected2 = {.radius = -1000.000000, .xc = 2.697100, .yc = -583.830000, .distance = -0.605370};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPI_TurnLeftThenStraight)
{
  pose initialPose = {.x = 2.000000, .y = 0.200000, .theta = -2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -3.141600 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -861.110000, .yc = 505.220000, .distance = -0.394650};
  maneuver expected2 = {.radius = 0.927660, .xc = 3.000000, .yc = 0.072345, .distance = -0.966240};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPI_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.000000, .y = 1.800000, .theta = -4.183200 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -3.141600 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 865.320000, .yc = 506.460000, .distance = -0.394630};
  maneuver expected2 = {.radius = -0.927670, .xc = 3.000000, .yc = 1.927700, .distance = -0.966270};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot3rdQuad_StraightThenTurnLeft)
{
  pose initialPose = {.x = 1.000000, .y = 0.200000, .theta = -2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -2.900000 };
  maneuver expected1 = {.radius = 0.983430, .xc = 1.848900, .yc = -0.296480, .distance = -0.786740};
  maneuver expected2 = {.radius = -1000.000000, .xc = -230.060000, .yc = 943.840000, .distance = -1.427800};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot3rdQuad_StraightThenTurnRight)
{
  pose initialPose = {.x = 0.857280, .y = 0.779210, .theta = -3.700000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -2.900000 };
  maneuver expected1 = {.radius = -0.983430, .xc = 1.378300, .yc = 1.613300, .distance = -0.786740};
  maneuver expected2 = {.radius = -1000.000000, .xc = 234.670000, .yc = -942.180000, .distance = -1.427800};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot3rdQuad_TurnLeftThenStraight)
{
  pose initialPose = {.x = 2.000000, .y = 0.200000, .theta = -2.100000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -2.900000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -861.180000, .yc = 505.090000, .distance = -0.108990};
  maneuver expected2 = {.radius = 1.514500, .xc = 3.362300, .yc = -0.470500, .distance = -1.211600};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot3rdQuad_TurnRightThenStraight)
{
  pose initialPose = {.x = 1.742800, .y = 1.243800, .theta = -3.700000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -2.900000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = 531.630000, .yc = 849.310000, .distance = -0.108960};
  maneuver expected2 = {.radius = -1.514500, .xc = 2.637700, .yc = 2.470500, .distance = -1.211600};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPi_2_StraightThenTurnLeft)
{
  pose initialPose = {.x = 4.000000, .y = -1.000000, .theta = -0.400000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.570800 };
  maneuver expected1 = {.radius = 1.637800, .xc = 4.637800, .yc = 0.508500, .distance = -1.917500};
  maneuver expected2 = {.radius = -1000.000000, .xc = -419.790000, .yc = 0.754110, .distance = -0.491500};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPi_2_StraightThenTurnRight)
{
  pose initialPose = {.x = 2.000000, .y = -1.000000, .theta = -2.741600 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.570800 };
  maneuver expected1 = {.radius = -1.637800, .xc = 1.362200, .yc = 0.508490, .distance = -1.917500};
  maneuver expected2 = {.radius = -1000.000000, .xc = 425.780000, .yc = 0.754380, .distance = -0.491510};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPi_2_TurnLeftThenStraight)
{
  pose initialPose = {.x = 4.000000, .y = -0.500000, .theta = -0.800000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.570800 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -713.690000, .yc = -696.860000, .distance = -0.964960};
  maneuver expected2 = {.radius = 1.159400, .xc = 4.159400, .yc = 1.000000, .distance = -0.893680};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRotNegPi_2_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.000000, .y = -0.500000, .theta = -2.341600 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.570800 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -715.010000, .yc = 696.560000, .distance = -0.964930};
  maneuver expected2 = {.radius = -1.159500, .xc = 1.840500, .yc = 1.000000, .distance = -0.893710};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot4thQuad_StraightThenTurnLeft)
{
  pose initialPose = {.x = 4.000000, .y = -0.500000, .theta = -0.400000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.400000 };
  maneuver expected1 = {.radius = 1.589100, .xc = 4.618800, .yc = 0.963640, .distance = -1.589100};
  maneuver expected2 = {.radius = -1000.000000, .xc = -629.720000, .yc = -108.290000, .distance = -0.310970};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot4thQuad_StraightThenTurnRight)
{
  pose initialPose = {.x = 2.560300, .y = -0.748320, .theta = -2.400000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.400000 };
  maneuver expected1 = {.radius = -1.589000, .xc = 1.487000, .yc = 0.423400, .distance = -1.589000};
  maneuver expected2 = {.radius = -1000.000000, .xc = 635.780000, .yc = 109.980000, .distance = -0.311050};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot4thQuad_TurnLeftThenStraight)
{
  pose initialPose = {.x = 4.000000, .y = 0.000000, .theta = -0.400000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.400000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -385.570000, .yc = -921.000000, .distance = -0.337310};
  maneuver expected2 = {.radius = 1.156500, .xc = 4.139700, .yc = 1.196600, .distance = -1.156500};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

TEST(WaypointControllerHelperTests, waypoint2maneuversTest_InverseOneTurn_TransPosYRot4thQuad_TurnRightThenStraight)
{
  pose initialPose = {.x = 2.392800, .y = -0.277210, .theta = -2.400000 };
  pose finalDestination = {.x = 3.000000, .y = 1.000000, .theta = -1.400000 };
  maneuver expected1 = {.radius = -1000.000000, .xc = -672.950000, .yc = 737.230000, .distance = -0.337250};
  maneuver expected2 = {.radius = -1.156600, .xc = 1.860300, .yc = 0.803420, .distance = -1.156600};

  std::vector<maneuver> myMans;

  myMans = waypoint2maneuvers(initialPose, finalDestination);
  EXPECT_TRUE(myMans.size() ==2);
  EXPECT_NEAR(myMans.at(0).distance, expected1.distance, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).distance, expected2.distance, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).radius, expected1.radius, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).radius, expected2.radius, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).xc, expected1.xc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).xc, expected2.xc, WAYPOINT2MANEUVERTOL);

  EXPECT_NEAR(myMans.at(0).yc, expected1.yc, WAYPOINT2MANEUVERTOL);
  EXPECT_NEAR(myMans.at(1).yc, expected2.yc, WAYPOINT2MANEUVERTOL);

}

